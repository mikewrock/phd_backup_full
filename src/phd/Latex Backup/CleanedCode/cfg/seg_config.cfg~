#!/usr/bin/env python
PACKAGE = "phd"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("k_search",    int_t,    0, "Number of neighbours to search for normal", 30)
gen.add("max_iterations",    int_t,    0, "Iterations for plane finding",1000 )
gen.add("radius_search", double_t, 0, "radius for searching for coplanar points",  0  )
gen.add("distance_threshold", double_t, 0, "threshold for how accurately points fit model",  .15  )
gen.add("normal_distance_weight", double_t, 0, "how much weight to put on normals vs coplanarity (1 for only normals)",  1  )
gen.add("eps_angle", double_t, 0, "allowable angle variance",  0.2  )
gen.add("leaf_size", double_t, 0, "downsample leaf size",  .02  )
gen.add("optimize_coefficients",   bool_t,   0, "optimize plane coefficients after calculating",  False)
gen.add("skip_downsample",   bool_t,   0, "skip the downsampling",  False)

gen.add("distance_threshold2", double_t, 0, "threshold for how accurately points fit model during refinement",  .02  )
gen.add("normal_distance_weight2", double_t, 0, "how much weight to put on normals vs coplanarity (0 is entirely distance based)",  0.1  )
gen.add("optimize_coefficients2",   bool_t,   0, "optimize plane coefficients after calculating",  False)


gen.add("dot_product", double_t, 0, "value of dot product between planes",  .4567  )
gen.add("dot_product_accuracy", double_t, 0, "threshold for accepting marker planes",  0.02  )
gen.add("purpendicularity_accuracy", double_t, 0, "threshold for accepting vertical planes",  .15  )
exit(gen.generate(PACKAGE, "dynamic_configuration_segmentation", "SEG"))



