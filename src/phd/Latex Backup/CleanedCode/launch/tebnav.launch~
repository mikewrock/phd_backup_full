<launch>

  <!--- Run description  -->
  <include file="$(find wrock_husky_description)/launch/description.launch" />
  <!--- Run husky base -->  
    <!-- Husky harware driver -->
    <node pkg="husky_base" type="husky_node" name="husky_node">
        <rosparam subst_value="true">
            port: /dev/serial/by-id/usb-FTDI_UC232R_FTUSXZW7-if00-port0

            control_frequency: 10.0
            diagnostic_frequency: 1.0

            max_acceleration: 3.0
            max_speed: 1.0
            wheel_diameter: 0.3555
            polling_timeout: 10.0
        </rosparam>
    </node>
  <include file="$(find husky_control)/launch/control.launch" />
  <include file="$(find husky_control)/launch/teleop.launch" />

  <!--- Run um6 -->
  <node pkg="um6" type="um6_driver" name="um6_driver">
    <param name="port" type="string" value="/dev/serial/by-id/usb-FTDI_TTL232R-3V3_FTG3VBFM-if00-port0"/>
    <param name="mag_updates" type="bool" value="false"/>
  </node>

  <!--- Run Move Base -->

  <arg name="no_static_map" default="true"/>

  <arg name="base_global_planner" default="navfn/NavfnROS"/>
  <arg name="base_local_planner" default="dwa_local_planner/DWAPlannerROS"/>
 
  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">

    <param name="base_global_planner" value="$(arg base_global_planner)"/>
<param name="base_local_planner" value="teb_local_planner/TebLocalPlannerROS" />
    <rosparam file="$(find phd)/cfg/planner.yaml" command="load"/>

    <!-- observation sources located in costmap_common.yaml -->
    <rosparam file="$(find phd)/cfg/costmap_common.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find phd)/cfg/costmap_common.yaml" command="load" ns="local_costmap" />

    <rosparam file="$(find phd)/cfg/base_local_planner_params.yaml" command="load"/>
    <!-- local costmap, needs size -->
    <rosparam file="$(find husky_navigation)/config/costmap_local.yaml" command="load" ns="local_costmap" />
    <param name="local_costmap/width" value="10.0"/>
    <param name="local_costmap/height" value="10.0"/>
<!--<rosparam param="recovery_behaviors"> [ { name: "backup_recovery", type: "backup_recovery_dwa/BackupRecovery" } ] </rosparam>-->
    <!-- static global costmap, static map provides size -->
    <rosparam file="$(find husky_navigation)/config/costmap_global_static.yaml" command="load" ns="global_costmap" unless="$(arg no_static_map)"/>
    
    <!-- global costmap with laser, for odom_navigation_demo -->
    <rosparam file="$(find husky_navigation)/config/costmap_global_laser.yaml" command="load" ns="global_costmap" if="$(arg no_static_map)"/>
    <param name="global_costmap/width" value="100.0" if="$(arg no_static_map)"/>
    <param name="global_costmap/height" value="100.0" if="$(arg no_static_map)"/>

 <param name="controller_frequency" value="10.0" />
<param name="recovery_behavior_enabled" value="false"/>
<param name="clearing_rotation_allowed" value="false"/>
  </node>



 
  <!--- Laser Scanner default="192.168.0.2"-->
  <arg name="host" default="192.168.0.2"  />
  <node pkg="lms1xx" name="lms1xx" type="LMS1xx_node" output = "screen">
    <param name="host" value="$(arg host)" />
  </node>
  <!--- Laser filters-->
  <node pkg="laser_filters" type="scan_to_scan_filter_chain"
      name="laser_filter" output = "screen">
    <rosparam command="load" file="$(find phd)/cfg/my_laser_config.yaml" />
<remap from="scan" to="scan_unfiltered" />
<remap from="scan_filtered" to="scan" />
  </node>

  <!--- Run local laser assembler -->
  <node type="laser_scan_assembler" pkg="laser_assembler" name="my_assembler">
    <param name="max_scans" type="int" value="10000" />
    <param name="fixed_frame" type="string" value="base_footprint" />
    <param name="tf_cache_time_secs" type="double" value="30.0" />
  </node>
  <!--- Run Powercube node-->
  <node name="cube_node" pkg="phd" type="cube_node" output="screen" />
  <!--- Run Joint State Fusion node-->
  <node name="joint_fusion_node" pkg="phd" type="joint_fusion_node" output="screen" />
 

<!-- hector mapping -->
<node pkg="hector_mapping" type="hector_mapping"     name="hector_mapping" output="screen">
<param name="base_frame" type="string" value="base_footprint" />
  </node>
  <!--- Run rviz -->
    <node name="rviz" pkg="rviz" type="rviz" required="True" output="screen" args="-d $(find phd)/cfg/rviz_scan.rviz"> 

  </node>


  <!--- Run localization service -->
  <node type="cloud_localizer" pkg="phd" name="localization_service" output="screen">
  </node>
  <!--- Run trajectory service -->
  <node type="trajectory_server" pkg="phd" name="trajectory_service" output="screen" required="True">
  </node>

  <!--- Run thickness service -->
  <node type="thickness_server" pkg="phd" name="thickness_service" output="screen">
  </node>

  <!--- Record data 
 <node pkg="rosbag" type="record" name="rosbag_record"
       args="-O /home/mike/testing/bag /assembled_cloud" />
-->
  <!--- Run dynamicreconfigure -->
  <node type="rqt_reconfigure" pkg="rqt_reconfigure" name="rqt_reconfigure" output="screen">
  </node>




</launch>
