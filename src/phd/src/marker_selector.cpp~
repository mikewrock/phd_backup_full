/*
################################### LICENSE ####################################

 Copyright (C) 2013 Robotics & Biology Laboratory (RBO) TU Berlin

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.

################################################################################
*/
//This node publishes a seclection of /assembled_cloud in /marker_selected_points
#include "rviz/selection/selection_manager.h"
#include "rviz/viewport_mouse_event.h"
#include "rviz/display_context.h"
#include "rviz/selection/forwards.h"
#include "rviz/properties/property_tree_model.h"
#include "rviz/properties/property.h"
#include "rviz/properties/vector_property.h"
#include "rviz/properties/int_property.h"
#include "rviz/properties/float_property.h"
#include "rviz/view_manager.h"
#include "rviz/view_controller.h"
#include "OGRE/OgreCamera.h"
#include "marker_selector.h"
#include <ros/ros.h>
#include <ros/time.h>
#include <sensor_msgs/PointCloud2.h>
#include <QVariant>
#include <pcl_conversions/pcl_conversions.h>
#include <pcl/common/transforms.h>
#include <pcl/visualization/pcl_visualizer.h>
#include <pcl/filters/passthrough.h>
#include <pcl/common/common.h>
#include <pcl/filters/impl/box_clipper3D.hpp>
#include <visualization_msgs/Marker.h>
#include <pcl/filters/crop_box.h>
#include <pcl/common/angles.h>

namespace rviz_plugin_marker_selector
{
//Constructor
marker_selector::marker_selector()
{
    updateTopic();
}
//Destructore
marker_selector::~marker_selector()
{
}
//Initialization function
void marker_selector::updateTopic()
{
	//Set the frame on the parameter server	
	nh_.param("frame_id", tf_frame_, std::string("/base_link"));
	//subscribe to /assembled_cloud and publish to /marker_selected_points
	rviz_cloud_topic_ = std::string("/marker_selected_points");
	subs_cloud_topic_ = std::string("/assembled_cloud");
	//Create publisher and subscribers
	rviz_selected_pub_ = nh_.advertise<sensor_msgs::PointCloud2>( rviz_cloud_topic_.c_str(), 1 );
	pc_subs_ =  nh_.subscribe(subs_cloud_topic_.c_str(),1,&marker_selector::PointCloudsCallback, this);
	ROS_INFO_STREAM_NAMED("marker_selector.updateTopic", "Publishing rviz selected points on topic " <<  nh_.resolveName (rviz_cloud_topic_) );//<< " with frame_id " << context_->getFixedFrame().toStdString() );
	//Clear the pointcloud holder
	current_pc_.reset(new pcl::PointCloud<pcl::PointXYZI>());
	//Initialize the number of selected points to 0
	num_selected_points_ = 0;
}
//Callback for when a cloud comes through /assembled_cloud
void marker_selector::PointCloudsCallback(const sensor_msgs::PointCloud2ConstPtr &pc_msg)
{
	// Convert ROS PC message into a pcl point cloud
	pcl::fromROSMsg(*pc_msg, *this->current_pc_);
}
//Function to execute when mouse is clicked
int marker_selector::processMouseEvent( rviz::ViewportMouseEvent& event )
{

	int flags = rviz::SelectionTool::processMouseEvent( event );
	// determine current selection mode
	if( event.alt() ){
		selecting_ = false;
	}
	else{
		if( event.leftDown() ){
			selecting_ = true;
		}
	}
	if( selecting_ ){
		if( event.leftUp() ){
			//When the mouse is release process the area and publish the points
			ROS_INFO_STREAM_NAMED( "marker_selector.processKeyEvent", "Using selected area to find a new bounding box and publish the points inside of it");
			this->_processSelectedAreaAndFindPoints();
		}
	}
	return flags;
}

int marker_selector::_processSelectedAreaAndFindPoints()
{
	rviz::SelectionManager* sel_manager = context_->getSelectionManager();
	rviz::M_Picked selection = sel_manager->getSelection();
	rviz::PropertyTreeModel *model = sel_manager->getPropertyModel();
	int num_points = model->rowCount();
	ROS_INFO_STREAM_NAMED( "marker_selector._processSelectedAreaAndFindPoints", "Number of points in the selected area: " << num_points);

	// Generate a ros point cloud message with the selected points in rviz
	sensor_msgs::PointCloud2 selected_points_ros;
	selected_points_ros.header.frame_id = context_->getFixedFrame().toStdString();
	selected_points_ros.height = 1;
	selected_points_ros.width = num_points;
	selected_points_ros.point_step = 20; //The data to hold a point takes 20 bytes
	selected_points_ros.row_step = num_points * selected_points_ros.point_step;
	selected_points_ros.is_dense = false;
	selected_points_ros.is_bigendian = false;

	selected_points_ros.data.resize( selected_points_ros.row_step );
	selected_points_ros.fields.resize( 5 ); //There are 5 fields in the expected ros message
	//Populate the fields with the appropriate information
	selected_points_ros.fields[0].name = "x";
	selected_points_ros.fields[0].offset = 0;
	selected_points_ros.fields[0].datatype = sensor_msgs::PointField::FLOAT32;
	selected_points_ros.fields[0].count = 1;

	selected_points_ros.fields[1].name = "y";
	selected_points_ros.fields[1].offset = 4;
	selected_points_ros.fields[1].datatype = sensor_msgs::PointField::FLOAT32;
	selected_points_ros.fields[1].count = 1;

	selected_points_ros.fields[2].name = "z";
	selected_points_ros.fields[2].offset = 8;
	selected_points_ros.fields[2].datatype = sensor_msgs::PointField::FLOAT32;
	selected_points_ros.fields[2].count = 1;

	selected_points_ros.fields[3].name = "intensity";
	selected_points_ros.fields[3].offset = 12;
	selected_points_ros.fields[3].datatype = sensor_msgs::PointField::FLOAT32;
	selected_points_ros.fields[3].count = 1;   

	selected_points_ros.fields[4].name = "index";
	selected_points_ros.fields[4].offset = 16;
	selected_points_ros.fields[4].datatype = sensor_msgs::PointField::FLOAT32;
	selected_points_ros.fields[4].count = 1;
	//Loop through all the points
	for( int i = 0; i < num_points; i++ )
	{
		QModelIndex child_index = model->index( i, 0 );
		rviz::Property* child = model->getProp( child_index );
		int chil = child->numChildren();
		rviz::VectorProperty* subchild = (rviz::VectorProperty*) child->childAt( 0 );
		rviz::FloatProperty* subchild2 = (rviz::FloatProperty*) child->childAt( 1 );
		Ogre::Vector3 vec = subchild->getVector();
		//Skip orientation details		
		QString qs;
		QString qo = "Orientation";
		qs = subchild2->getName();
		if(qs != qo){		
			//Copy values to our pointcloud2				
			float vec2 = subchild2->getFloat();
			uint8_t* ptr = &selected_points_ros.data[0] + i * selected_points_ros.point_step;
			*(float*)ptr = vec.x;
			ptr += 4;
			*(float*)ptr = vec.y;
			ptr += 4;
			*(float*)ptr = vec.z;
			ptr += 4;
			*(float*)ptr = vec2;
			ptr += 4;
		}
    }
	//Set the timestamp and publish the pointcloud
	selected_points_ros.header.stamp = ros::Time::now();
	rviz_selected_pub_.publish( selected_points_ros );
	return 0;
}



} // end namespace rviz_plugin_selected_points_topic
//Code to make this node a plugin for rviz
#include <pluginlib/class_list_macros.h>
PLUGINLIB_EXPORT_CLASS( rviz_plugin_marker_selector::marker_selector, rviz::Tool )
