#include <ros/ros.h>
// PCL specific includes
#include <sensor_msgs/PointCloud2.h>
#include <pcl_conversions/pcl_conversions.h>
#include <pcl/point_cloud.h>
#include <pcl/PCLPointCloud2.h>
#include <pcl/point_types.h>
#include <pcl/filters/voxel_grid.h>
#include <string>
#include <tf/transform_broadcaster.h>
#include <pcl/conversions.h>
#include "pcl_ros/transforms.h"
#include <iostream>
#include <pcl/filters/passthrough.h>
#include <pcl/io/pcd_io.h>
#include "std_msgs/String.h"
#include <sstream>
#include <pcl/filters/extract_indices.h>
#include <sensor_msgs/JointState.h>  
#include <pcl/octree/octree.h>
#include <vector>
#include <ctime>
#include <boost/make_shared.hpp>
#include <pcl/point_representation.h>
#include <pcl/filters/filter.h>
#include <pcl/features/normal_3d.h>
#include <pcl/registration/icp.h>
#include <pcl/registration/icp_nl.h>
#include <pcl/registration/transforms.h>
#include <pcl/visualization/pcl_visualizer.h>

#define DEBUG 1

//convenient typedefs
typedef pcl::PointXYZ PointT;
typedef pcl::PointCloud<PointT> PointCloud;
typedef pcl::PointNormal PointNormalT;
typedef pcl::PointCloud<PointNormalT> PointCloudWithNormals;

  ros::Publisher pub;
  ros::Publisher pub1;

  pcl::PointCloud<pcl::PointXYZI>::Ptr marker (new pcl::PointCloud<pcl::PointXYZI> );
  pcl::PointCloud<pcl::PointXYZI>::Ptr cloudB (new pcl::PointCloud<pcl::PointXYZI> );
  //make the publisher global so we can publish from the callback
std_msgs::String filename;
//convenient structure to handle our pointclouds
struct PCD
{
  PointCloud::Ptr cloud;
  std::string f_name;

  PCD() : cloud (new PointCloud) {};
};





////////////////////////////////////////////////////////////////////////////////
/** \brief Align a pair of PointCloud datasets and return the result
  * \param cloud_src the source PointCloud
  * \param cloud_tgt the target PointCloud
  * \param output the resultant aligned source PointCloud
  * \param final_transform the resultant transform between source and target
  */
void pairAlign (const PointCloud::Ptr cloud_src, const PointCloud::Ptr cloud_tgt, PointCloud::Ptr output, Eigen::Matrix4f &final_transform, bool downsample = false)
{

  pcl::IterativeClosestPoint<pcl::PointXYZ, pcl::PointXYZ> icp;
  icp.setInputSource (cloud_src);
  icp.setInputTarget (cloud_tgt);
  typedef pcl::registration::TransformationEstimationLM <pcl::PointXYZ, pcl::PointXYZ> te;
  boost::shared_ptr<te> teLM (new te);
  icp.setTransformationEstimation (teLM);
  icp.setMaximumIterations(100);
  pcl::PointCloud<pcl::PointXYZ> Final;
  icp.align (Final);
  std::cout << "has converged:" << icp.hasConverged() << " score: " << icp.getFitnessScore() << std::endl;
if(icp.getFitnessScore() > 0.01){
ROS_INFO("trying again");  
icp.setTransformationEstimation (teLM);
  icp.setMaximumIterations(500);
  pcl::PointCloud<pcl::PointXYZ> Final;
  icp.align (Final);
  std::cout << "has converged:" << icp.hasConverged() << " score: " << icp.getFitnessScore() << std::endl;
}
  std::cout << icp.getFinalTransformation() << std::endl;
  Eigen::Matrix4f T;
  Eigen::Matrix4f Ti = Eigen::Matrix4f::Identity (), prev, targetToSource;
  T = icp.getFinalTransformation();
  // Get the transformation from target to source
  targetToSource = T.inverse();
  // Transform target back in source frame
  pcl::transformPointCloud (*cloud_tgt, *output, targetToSource);
  final_transform = targetToSource;
}


void 
cloud_cb (const sensor_msgs::PointCloud2ConstPtr& cloud_msg)
{
  
ROS_INFO("GOT A CLOUD!");
sensor_msgs::PointCloud2 cloud_msg2 = *cloud_msg;
//fix the naming discrepancy between ROS and PCL (from "intensities" to "intensity")
cloud_msg2.fields[3].name = "intensity";
//Create a PCL pointcloud
pcl::PointCloud<pcl::PointXYZI>::Ptr cloud (new pcl::PointCloud<pcl::PointXYZI>);
//Populate the PCL pointcloud with the ROS message
pcl::fromROSMsg(cloud_msg2,*cloud);
//Create containers for filtered clouds
pcl::PointCloud<pcl::PointXYZI>::Ptr cloud_filtered (new pcl::PointCloud<pcl::PointXYZI>);
// Create the filtering object
  pcl::PassThrough<pcl::PointXYZI> pass (true);
//filter the data
  pass.setInputCloud (cloud);
  pass.setFilterFieldName ("intensity");
  pass.setFilterLimits (1000,5000);
  pass.filter (*cloud_filtered);
ROS_INFO("done filtering");
 
	//Align the two clouds
	
  pcl::PointCloud<pcl::PointXYZI>::Ptr cloud_aligned (new pcl::PointCloud<pcl::PointXYZI> );
PointCloud::Ptr result (new PointCloud), source (new PointCloud), target (new PointCloud);
  Eigen::Matrix4f GlobalTransform = Eigen::Matrix4f::Identity (), pairTransform;

  // Fill in the source cloud data
  source->width  = marker->width;
  source->height = marker->height;
  source->points.resize (marker->width * marker->height);
std::cout << "Done Resizing" << std::endl;
  for (size_t i = 0; i < source->points.size (); ++i)
  {
    source->points[i].x = marker->points[i].x;
    source->points[i].y = marker->points[i].y;
    source->points[i].z = marker->points[i].z;
  }

  // Fill in the target cloud data
  target->width  = cloud_filtered->width;
  target->height = cloud_filtered->height;
  target->points.resize (cloud_filtered->width * cloud_filtered->height);

  for (size_t i = 0; i < target->points.size (); ++i)
  {
    target->points[i].x = cloud_filtered->points[i].x;
    target->points[i].y = cloud_filtered->points[i].y;
    target->points[i].z = cloud_filtered->points[i].z;
  }

  //do the actual aligning
  PointCloud::Ptr temp (new PointCloud);
  pairAlign (source, target, temp, pairTransform, false);
  std::cout << "Done Aligning" << std::endl;
  pcl::transformPointCloud (*cloud, *cloud_aligned, pairTransform);
  if(DEBUG){
   // pcl::io::savePCDFileASCII ("/home/mike/cloudaligned.pcd", *cloud_aligned);
  }





  // Convert to ROS data type
  sensor_msgs::PointCloud2 output;
  pcl::toROSMsg(*cloud_aligned, output);
  output.header.frame_id = "marker_frame";
  output.header.stamp = ros::Time::now();
  pub.publish(output);
}








int
main (int argc, char** argv)
{
  // Initialize ROS
  ros::init (argc, argv, "marker_node");
  ros::NodeHandle nh;

  // Create a ROS subscriber for the input point cloud
  ros::Subscriber sub = nh.subscribe ("assembled_cloud", 1, cloud_cb);


pub = nh.advertise<sensor_msgs::PointCloud2> ("cloud_aligned", 1);
pub1 = nh.advertise<sensor_msgs::PointCloud2> ("marker", 1);



  pcl::PointCloud<pcl::PointXYZI>::Ptr markerA (new pcl::PointCloud<pcl::PointXYZI> ());

//get from rosparam instead
if(argc < 2){
printf("usage: rosrun wrock marker_node \"path\\to\\filename\" for marker.pcd");
return(0);
}
    if (pcl::io::loadPCDFile<pcl::PointXYZI> ("/home/mike/catkin_ws/src/wrock/marker.pcd", *markerA) == -1) 
    {
      PCL_ERROR ("Couldn't find marker file \n");

      return(0);
	}

  Eigen::Matrix4f transform_1 = Eigen::Matrix4f::Identity();
// Define a translation of 2.5 meters on the x axis.
  transform_1 (0,3) = 2.5;
  // Executing the transformation
  // You can either apply transform_1 or transform_2; they are the same
  pcl::transformPointCloud (*markerA, *marker, transform_1);

  sensor_msgs::PointCloud2 outputm;
  pcl::toROSMsg(*marker, outputm);
  outputm.header.frame_id = "base_link";
  outputm.header.stamp = ros::Time::now();
    ROS_INFO("publishing ");
ros::Duration duration(1);
    duration.sleep();
  pub1.publish(outputm);
    ROS_INFO("done ");

    ROS_INFO("READY ");
//publish marker in marker frame
//periodically publish tf from marker to map/base_link?
ros::spin();

}
