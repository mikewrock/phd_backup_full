# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from phd/arm_msg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class arm_msg(genpy.Message):
  _md5sum = "60ecd3f39bc022e6e6d98a74d7b832ac"
  _type = "phd/arm_msg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 j1
float32 j2
float32 j3
float32 j4
float32 j5
float32 j6
float32 x
float32 y
float32 z
float32 rx
float32 ry
float32 rz
float32 vel
float32 acc
int32 fig
bool pose
int32 motion_type
string user_string
"""
  __slots__ = ['j1','j2','j3','j4','j5','j6','x','y','z','rx','ry','rz','vel','acc','fig','pose','motion_type','user_string']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','int32','bool','int32','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       j1,j2,j3,j4,j5,j6,x,y,z,rx,ry,rz,vel,acc,fig,pose,motion_type,user_string

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(arm_msg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.j1 is None:
        self.j1 = 0.
      if self.j2 is None:
        self.j2 = 0.
      if self.j3 is None:
        self.j3 = 0.
      if self.j4 is None:
        self.j4 = 0.
      if self.j5 is None:
        self.j5 = 0.
      if self.j6 is None:
        self.j6 = 0.
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.z is None:
        self.z = 0.
      if self.rx is None:
        self.rx = 0.
      if self.ry is None:
        self.ry = 0.
      if self.rz is None:
        self.rz = 0.
      if self.vel is None:
        self.vel = 0.
      if self.acc is None:
        self.acc = 0.
      if self.fig is None:
        self.fig = 0
      if self.pose is None:
        self.pose = False
      if self.motion_type is None:
        self.motion_type = 0
      if self.user_string is None:
        self.user_string = ''
    else:
      self.j1 = 0.
      self.j2 = 0.
      self.j3 = 0.
      self.j4 = 0.
      self.j5 = 0.
      self.j6 = 0.
      self.x = 0.
      self.y = 0.
      self.z = 0.
      self.rx = 0.
      self.ry = 0.
      self.rz = 0.
      self.vel = 0.
      self.acc = 0.
      self.fig = 0
      self.pose = False
      self.motion_type = 0
      self.user_string = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_14fiBi.pack(_x.j1, _x.j2, _x.j3, _x.j4, _x.j5, _x.j6, _x.x, _x.y, _x.z, _x.rx, _x.ry, _x.rz, _x.vel, _x.acc, _x.fig, _x.pose, _x.motion_type))
      _x = self.user_string
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 65
      (_x.j1, _x.j2, _x.j3, _x.j4, _x.j5, _x.j6, _x.x, _x.y, _x.z, _x.rx, _x.ry, _x.rz, _x.vel, _x.acc, _x.fig, _x.pose, _x.motion_type,) = _struct_14fiBi.unpack(str[start:end])
      self.pose = bool(self.pose)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.user_string = str[start:end].decode('utf-8')
      else:
        self.user_string = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_14fiBi.pack(_x.j1, _x.j2, _x.j3, _x.j4, _x.j5, _x.j6, _x.x, _x.y, _x.z, _x.rx, _x.ry, _x.rz, _x.vel, _x.acc, _x.fig, _x.pose, _x.motion_type))
      _x = self.user_string
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 65
      (_x.j1, _x.j2, _x.j3, _x.j4, _x.j5, _x.j6, _x.x, _x.y, _x.z, _x.rx, _x.ry, _x.rz, _x.vel, _x.acc, _x.fig, _x.pose, _x.motion_type,) = _struct_14fiBi.unpack(str[start:end])
      self.pose = bool(self.pose)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.user_string = str[start:end].decode('utf-8')
      else:
        self.user_string = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_14fiBi = struct.Struct("<14fiBi")
