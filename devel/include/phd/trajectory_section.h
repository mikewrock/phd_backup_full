// Generated by gencpp from file phd/trajectory_section.msg
// DO NOT EDIT!


#ifndef PHD_MESSAGE_TRAJECTORY_SECTION_H
#define PHD_MESSAGE_TRAJECTORY_SECTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <phd/trajectory_point.h>
#include <phd/trajectory_point.h>
#include <phd/trajectory_point.h>

namespace phd
{
template <class ContainerAllocator>
struct trajectory_section_
{
  typedef trajectory_section_<ContainerAllocator> Type;

  trajectory_section_()
    : points()
    , end_point()
    , start_point()
    , z_height(0.0)  {
    }
  trajectory_section_(const ContainerAllocator& _alloc)
    : points(_alloc)
    , end_point(_alloc)
    , start_point(_alloc)
    , z_height(0.0)  {
  (void)_alloc;
    }



   typedef std::vector< ::phd::trajectory_point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::phd::trajectory_point_<ContainerAllocator> >::other >  _points_type;
  _points_type points;

   typedef  ::phd::trajectory_point_<ContainerAllocator>  _end_point_type;
  _end_point_type end_point;

   typedef  ::phd::trajectory_point_<ContainerAllocator>  _start_point_type;
  _start_point_type start_point;

   typedef float _z_height_type;
  _z_height_type z_height;




  typedef boost::shared_ptr< ::phd::trajectory_section_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::phd::trajectory_section_<ContainerAllocator> const> ConstPtr;

}; // struct trajectory_section_

typedef ::phd::trajectory_section_<std::allocator<void> > trajectory_section;

typedef boost::shared_ptr< ::phd::trajectory_section > trajectory_sectionPtr;
typedef boost::shared_ptr< ::phd::trajectory_section const> trajectory_sectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::phd::trajectory_section_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::phd::trajectory_section_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace phd

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'phd': ['/home/mike/catkin_ws/src/phd/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::phd::trajectory_section_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::phd::trajectory_section_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::phd::trajectory_section_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::phd::trajectory_section_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::phd::trajectory_section_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::phd::trajectory_section_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::phd::trajectory_section_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4526fbf8ae96e832551bf5fbb900f1ab";
  }

  static const char* value(const ::phd::trajectory_section_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4526fbf8ae96e832ULL;
  static const uint64_t static_value2 = 0x551bf5fbb900f1abULL;
};

template<class ContainerAllocator>
struct DataType< ::phd::trajectory_section_<ContainerAllocator> >
{
  static const char* value()
  {
    return "phd/trajectory_section";
  }

  static const char* value(const ::phd::trajectory_section_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::phd::trajectory_section_<ContainerAllocator> >
{
  static const char* value()
  {
    return "trajectory_point[] points\n\
trajectory_point end_point\n\
trajectory_point start_point\n\
float32 z_height\n\
\n\
\n\
\n\
================================================================================\n\
MSG: phd/trajectory_point\n\
float32 x\n\
float32 y\n\
float32 z\n\
float32 nx\n\
float32 ny\n\
float32 nz\n\
float32 d\n\
";
  }

  static const char* value(const ::phd::trajectory_section_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::phd::trajectory_section_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.points);
      stream.next(m.end_point);
      stream.next(m.start_point);
      stream.next(m.z_height);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct trajectory_section_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::phd::trajectory_section_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::phd::trajectory_section_<ContainerAllocator>& v)
  {
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::phd::trajectory_point_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
    s << indent << "end_point: ";
    s << std::endl;
    Printer< ::phd::trajectory_point_<ContainerAllocator> >::stream(s, indent + "  ", v.end_point);
    s << indent << "start_point: ";
    s << std::endl;
    Printer< ::phd::trajectory_point_<ContainerAllocator> >::stream(s, indent + "  ", v.start_point);
    s << indent << "z_height: ";
    Printer<float>::stream(s, indent + "  ", v.z_height);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PHD_MESSAGE_TRAJECTORY_SECTION_H
