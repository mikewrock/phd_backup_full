// Generated by gencpp from file phd/marker_val.msg
// DO NOT EDIT!


#ifndef PHD_MESSAGE_MARKER_VAL_H
#define PHD_MESSAGE_MARKER_VAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace phd
{
template <class ContainerAllocator>
struct marker_val_
{
  typedef marker_val_<ContainerAllocator> Type;

  marker_val_()
    : i(0)
    , k(0)
    , j(0)
    , index(0)
    , val(0.0)  {
    }
  marker_val_(const ContainerAllocator& _alloc)
    : i(0)
    , k(0)
    , j(0)
    , index(0)
    , val(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _i_type;
  _i_type i;

   typedef int32_t _k_type;
  _k_type k;

   typedef int32_t _j_type;
  _j_type j;

   typedef int32_t _index_type;
  _index_type index;

   typedef float _val_type;
  _val_type val;




  typedef boost::shared_ptr< ::phd::marker_val_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::phd::marker_val_<ContainerAllocator> const> ConstPtr;

}; // struct marker_val_

typedef ::phd::marker_val_<std::allocator<void> > marker_val;

typedef boost::shared_ptr< ::phd::marker_val > marker_valPtr;
typedef boost::shared_ptr< ::phd::marker_val const> marker_valConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::phd::marker_val_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::phd::marker_val_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace phd

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'phd': ['/home/mike/catkin_ws/src/phd/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::phd::marker_val_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::phd::marker_val_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::phd::marker_val_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::phd::marker_val_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::phd::marker_val_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::phd::marker_val_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::phd::marker_val_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e9b66eb77ea6bafd8fa062f32c61a435";
  }

  static const char* value(const ::phd::marker_val_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe9b66eb77ea6bafdULL;
  static const uint64_t static_value2 = 0x8fa062f32c61a435ULL;
};

template<class ContainerAllocator>
struct DataType< ::phd::marker_val_<ContainerAllocator> >
{
  static const char* value()
  {
    return "phd/marker_val";
  }

  static const char* value(const ::phd::marker_val_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::phd::marker_val_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 i\n\
int32 k\n\
int32 j\n\
int32 index\n\
float32 val\n\
\n\
";
  }

  static const char* value(const ::phd::marker_val_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::phd::marker_val_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.i);
      stream.next(m.k);
      stream.next(m.j);
      stream.next(m.index);
      stream.next(m.val);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct marker_val_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::phd::marker_val_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::phd::marker_val_<ContainerAllocator>& v)
  {
    s << indent << "i: ";
    Printer<int32_t>::stream(s, indent + "  ", v.i);
    s << indent << "k: ";
    Printer<int32_t>::stream(s, indent + "  ", v.k);
    s << indent << "j: ";
    Printer<int32_t>::stream(s, indent + "  ", v.j);
    s << indent << "index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.index);
    s << indent << "val: ";
    Printer<float>::stream(s, indent + "  ", v.val);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PHD_MESSAGE_MARKER_VAL_H
