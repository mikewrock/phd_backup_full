// Generated by gencpp from file wrock/joint_pose.msg
// DO NOT EDIT!


#ifndef WROCK_MESSAGE_JOINT_POSE_H
#define WROCK_MESSAGE_JOINT_POSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace wrock
{
template <class ContainerAllocator>
struct joint_pose_
{
  typedef joint_pose_<ContainerAllocator> Type;

  joint_pose_()
    : j1(0.0)
    , j2(0.0)
    , j3(0.0)
    , j4(0.0)
    , j5(0.0)  {
    }
  joint_pose_(const ContainerAllocator& _alloc)
    : j1(0.0)
    , j2(0.0)
    , j3(0.0)
    , j4(0.0)
    , j5(0.0)  {
  (void)_alloc;
    }



   typedef float _j1_type;
  _j1_type j1;

   typedef float _j2_type;
  _j2_type j2;

   typedef float _j3_type;
  _j3_type j3;

   typedef float _j4_type;
  _j4_type j4;

   typedef float _j5_type;
  _j5_type j5;




  typedef boost::shared_ptr< ::wrock::joint_pose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wrock::joint_pose_<ContainerAllocator> const> ConstPtr;

}; // struct joint_pose_

typedef ::wrock::joint_pose_<std::allocator<void> > joint_pose;

typedef boost::shared_ptr< ::wrock::joint_pose > joint_posePtr;
typedef boost::shared_ptr< ::wrock::joint_pose const> joint_poseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wrock::joint_pose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wrock::joint_pose_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace wrock

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'wrock': ['/home/mike/catkin_ws/src/wrock/msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::wrock::joint_pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wrock::joint_pose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wrock::joint_pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wrock::joint_pose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wrock::joint_pose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wrock::joint_pose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wrock::joint_pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c0bd5c4d3ba9c1c1ae78ffd71bd90da0";
  }

  static const char* value(const ::wrock::joint_pose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc0bd5c4d3ba9c1c1ULL;
  static const uint64_t static_value2 = 0xae78ffd71bd90da0ULL;
};

template<class ContainerAllocator>
struct DataType< ::wrock::joint_pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wrock/joint_pose";
  }

  static const char* value(const ::wrock::joint_pose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wrock::joint_pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 j1\n\
float32 j2\n\
float32 j3\n\
float32 j4\n\
float32 j5\n\
\n\
";
  }

  static const char* value(const ::wrock::joint_pose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wrock::joint_pose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.j1);
      stream.next(m.j2);
      stream.next(m.j3);
      stream.next(m.j4);
      stream.next(m.j5);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct joint_pose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wrock::joint_pose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wrock::joint_pose_<ContainerAllocator>& v)
  {
    s << indent << "j1: ";
    Printer<float>::stream(s, indent + "  ", v.j1);
    s << indent << "j2: ";
    Printer<float>::stream(s, indent + "  ", v.j2);
    s << indent << "j3: ";
    Printer<float>::stream(s, indent + "  ", v.j3);
    s << indent << "j4: ";
    Printer<float>::stream(s, indent + "  ", v.j4);
    s << indent << "j5: ";
    Printer<float>::stream(s, indent + "  ", v.j5);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WROCK_MESSAGE_JOINT_POSE_H
